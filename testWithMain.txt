
const int maxMsg = 150;
const int maxRows = UINT8_MAX*10;
const int maxColums = UINT8_MAX*10;
string getMsgWithSizeAndVal(uint size,char c){
    string msg;
    for (size_t i = 0; i < size; i++){
       msg += c; 
    }
    return msg;
}
string getMsgWithSize(uint size){
    string msg;
    for (size_t i = 0; i < size; i++){
       msg += (rand() % 89 + 1) + 33; 
    }
    return msg;
}
string getRandMsg(){
    string msg;
    for (size_t i = 0; i < rand()%maxMsg; i++){
       msg += (rand() % 89 + 1) + 33; 
    }
    return msg;
}

int main(){
    ariel::Board board;
    std::string msg,msg2,check;
    uint row,col;
    ariel::Direction direction;
    cout << "******************* 111111111111111111111 ****************\n";

    for (uint i = 0; i < 20; i++){
        row = rand()%maxRows;
        col = rand()%maxColums;
        msg = getMsgWithSizeAndVal(100,'_');
        direction = (rand()%2 == 1)? ariel::Direction::Horizontal : ariel::Direction::Vertical;
        if(board.read(row, col, direction, 100) != msg){
            cout << false << "\n";
        }
    }
    cout << "******************* 222222222222222222222 ****************\n";

    for (uint i = 1; i < 20; i++){
        msg = getMsgWithSize(10);
        board.post(i,i,ariel::Direction::Horizontal,msg);
        msg2 = getMsgWithSize(10);
        check = msg2.substr(0, 1) + msg.substr(1, msg.size());
        board.post(i,i,ariel::Direction::Vertical,msg2);
        board.read(i,i,ariel::Direction::Horizontal,msg.size());
        board.read(i,i,ariel::Direction::Vertical,msg2.size());
        if(check != board.read(i,i,ariel::Direction::Horizontal,msg.size())){
            cout << false << "\n";
        }
   }
    cout << "******************* 33333333333333333333 ****************\n";

       for (uint i = 0; i < 20; i++){
        row = rand()%maxRows;
        col = rand()%maxColums;
        direction = (rand()%2 == 1)? ariel::Direction::Horizontal: ariel::Direction::Vertical;
        msg = getRandMsg();
        board.post(row,col,direction,msg);
        if(board.read(row, col, direction, msg.size()) != msg){
            cout << false << "\n";
        }
    } 

    return 0;
}
